Based on the provided code and the issue where Firestore is not storing user data despite successful authentication, the problem likely stems from one or more of the following: misconfiguration, untriggered sync logic, Firestore rules, or errors in the data-saving process that are being silently handled. Since you’ve asked not to change important logic or edit the UI, I’ll focus on diagnosing the issue by analyzing the existing code, identifying potential failure points, and suggesting checks or minimal adjustments (e.g., adding logging) to pinpoint the cause without altering core functionality. Let’s break this down step-by-step.

Step 1: Verify the Data Flow
The data should flow from onboarding to Firestore as follows:

Authentication: A user is created via signUpWithEmail in firebase.ts, and AuthContext.tsx initializes a Firestore document with basic user data using createUserDocument.
Onboarding: The onboarding/index.tsx and steps.tsx files collect data, with the final step (RecommendationsStep) calculating nutrition targets and calling updateUserDocument to save the data.
Sync: The useDataSync hook and dataSyncService periodically sync local data to Firestore.
Since users are visible in Firebase Authentication but not in Firestore, the issue likely occurs after authentication but before or during the Firestore write operations.

Step 2: Analyze Potential Failure Points
1. Initial User Document Creation in AuthContext.tsx
Code: In AuthContext.tsx, when a new user is detected (onAuthStateChanged), it calls createUserDocument if no Firestore data exists:
typescript

Collapse

Wrap

Copy
const success = await createUserDocument(firebaseUser.uid, newUser);
if (success) {
  setUser(newUser);
  setIsNewUser(true);
} else {
  setFirestoreError(true);
}
Check:
Ensure createUserDocument is called. Add a console.log before and after the setDoc call in firebase.ts:
typescript

Collapse

Wrap

Copy
console.log("Attempting to create user document for UID:", userId);
const userRef = doc(db, 'users', userId);
await setDoc(userRef, {
  ...userData,
  createdAt: new Date().toISOString(),
  onboardingComplete: false
});
console.log("User document created successfully for UID:", userId);
Open the browser console after signing up and look for these logs. If the second log is missing or an error appears, the setDoc call failed.
Possible Issue:
Firestore rules might block the write (e.g., request.auth != null but user isn’t authenticated yet).
The Firebase SDK might not be properly initialized (check firebaseConfig values).
2. Onboarding Data Saving in onboarding/index.tsx
Code: The mutate function in onboarding/index.tsx calls updateUserDocument when onboarding completes:
typescript

Collapse

Wrap

Copy
await updateUserDocument(firebaseUser.uid, {
  onboardingComplete: true,
  onboardingData: dataWithUserId,
  gender: data.gender,
  age: data.age,
  // ...other fields
});
Check:
Add logging to confirm the call:
typescript

Collapse

Wrap

Copy
console.log("Attempting to update Firestore with onboarding data for UID:", firebaseUser.uid);
await updateUserDocument(firebaseUser.uid, { ... });
console.log("Onboarding data update attempted for UID:", firebaseUser.uid);
Verify the onSuccess callback runs by adding:
typescript

Collapse

Wrap

Copy
onSuccess: (response) => {
  console.log("Onboarding mutation succeeded for UID:", firebaseUser?.uid);
  checkAndCalculateNutritionTargets();
},
Possible Issue:
The mutate function might not be triggered if firebaseUser is null (check authentication state).
updateUserDocument might fail silently due to an error (e.g., invalid data or permissions).
3. RecommendationsStep Data Saving in steps.tsx
Code: The RecommendationsStep in steps.tsx calculates nutrition targets and calls updateUserDocument:
typescript

Collapse

Wrap

Copy
const updateResult = await updateUserDocument(userId, {
  onboardingComplete: true,
  nutritionTargets: nutritionTargetsData,
  targetCalories: recommendations.calories,
  // ...other fields
});
if (!updateResult) {
  console.error('❌ updateUserDocument returned false - document may not have been saved');
  // Fallback with setDoc
}
Check:
Add detailed logging:
typescript

Collapse

Wrap

Copy
console.log("Attempting to save nutrition data to Firestore for UID:", userId, "with data:", {
  onboardingComplete: true,
  nutritionTargets: nutritionTargetsData
});
const updateResult = await updateUserDocument(userId, { ... });
console.log("Update result for UID:", userId, "is:", updateResult);
Check the console for the updateResult value and any fallback setDoc logs.
Possible Issue:
updateUserDocument might return false due to an error, and the fallback setDoc might also fail.
The data structure might contain invalid fields (e.g., undefined values that Firestore rejects).
4. Periodic Sync in useDataSync and dataSyncService
Code: The useDataSync hook sets up a 5-minute sync interval:
typescript

Collapse

Wrap

Copy
const syncInterval = setInterval(async () => {
  await dataSyncService.syncToFirestore(user.uid);
}, 5 * 60 * 1000);
dataSyncService.syncToFirestore calls updateUserDocument:
typescript

Collapse

Wrap

Copy
const updateResult = await updateUserDocument(userId, sanitizedData);
if (!updateResult) {
  console.error('Failed to update user document in Firestore - attempting direct setDoc');
  await setDoc(userRef, sanitizedData, { merge: true });
}
Check:
Add logging in syncToFirestore:
typescript

Collapse

Wrap

Copy
console.log("Starting sync to Firestore for UID:", userId, "with data:", sanitizedData);
const updateResult = await updateUserDocument(userId, sanitizedData);
console.log("Sync result for UID:", userId, "is:", updateResult);
Wait 5 minutes after onboarding or manually trigger the sync by calling dataSyncService.syncToFirestore(user.uid) in the console.
Possible Issue:
The sync is skipped for new users (if (isNewUser) return;).
onboardingComplete might not be set to true, preventing sync.
5. Firestore Rules
Check:
In the Firebase Console, go to Firestore Database > Rules.
Current rules might be restrictive (e.g., allow write: if request.auth != null;). Test with permissive rules temporarily:
javascript

Collapse

Wrap

Copy
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if true; // Temporary for debugging
    }
  }
}
Save and wait for deployment, then retest with a new user.
Possible Issue:
If rules require authentication and the user isn’t authenticated during the write, data won’t save.
6. Firebase Configuration
Check:
In firebase.ts, ensure all config values are loaded:
typescript

Collapse

Wrap

Copy
console.log('🔥 Initializing Firebase with config:', firebaseConfig);
If any value is missing (e.g., ⚠️ Missing Firebase config:), check Replit secrets (e.g., FIREBASE_API_KEY) or environment variables.
Run checkFirebaseConnectivity() manually in the console:
javascript

Collapse

Wrap

Copy
checkFirebaseConnectivity().then(console.log);
Possible Issue:
Missing or invalid config values could prevent Firestore initialization.
Step 3: Diagnostic Steps
Since we can’t modify core logic or UI, add temporary logging to existing functions and monitor the console:

Sign Up a New User:
Use /auth to create a new account (e.g., testuser3@example.com).
Complete Onboarding:
Go through all steps and submit the final RecommendationsStep.
Check Console Logs:
Look for logs from createUserDocument, updateUserDocument, syncToFirestore, and any errors.
Inspect Firestore:
Immediately after onboarding, check the Firebase Console > Firestore Database > users/{uid}.
Analyze Results:
If logs show attempts but no data, check for errors or rule violations.
If no logs appear, the function isn’t being called (e.g., authentication issue).
Step 4: Likely Causes and Fixes
Based on the analysis, here are the most probable causes and minimal fixes:

Authentication Timing: If createUserDocument runs before the user is fully authenticated, it might fail. Ensure onAuthStateChanged waits for the user state.
Fix: Add a delay or confirm firebaseUser is valid before calling createUserDocument.
Onboarding Completion: If onboardingComplete isn’t set to true, useDataSync skips sync. The RecommendationsStep sets it, but if updateUserDocument fails, it won’t persist.
Fix: Verify updateResult and ensure the fallback setDoc works.
Firestore Rules: Restrictive rules might block writes.
Fix: Use the permissive rule temporarily, then tighten it after debugging.
Silent Failures: Errors in updateUserDocument might be caught but not surfaced.
Fix: Enhance error logging (already present in the code) and check the console.
Step 5: Recommended Action
Add Logging:
Insert the suggested console.log statements in createUserDocument, updateUserDocument (in both onboarding/index.tsx and RecommendationsStep), and syncToFirestore.
Test with a New User:
Create a new account and complete onboarding while monitoring the console.
Check Firestore Rules:
Temporarily set permissive rules if no data appears.
Report Findings:
Share the console output (e.g., errors or missing logs), and I’ll help refine the diagnosis.
Could you give me the steps that Replit should take to implement this?


Iâ€™ll provide a detailed, step-by-step prompt for Replitâ€™s AI agent to implement the 3-day free trial for the yearly product (SAR 129.99/year) in the "Saraat AI" application, based on the guide I provided earlier. This prompt assumes youâ€™ve provided the YEARLY_PRICE_ID (e.g., as an environment variable YEARLY_PRICE_ID=price_123) in Replitâ€™s Secrets, and it focuses on updating the payment page (/frontend/src/components/Payment.jsx) and backend (/backend/routes/payment.js) to handle the Stripe subscription with a 3-day free trial, ensuring Apple Pay support for iPhone users. The prompt ensures the app name is "Saraat AI" and uses your custom logo (already inserted in the project).

plaintext

Collapse

Wrap

Copy
You are an expert fullstack developer with 30 years of experience, currently working on the "Saraat AI" calorie tracking web application in Replit, built with React.js for the frontend, Express.js for the backend, and Tailwind CSS for styling. We need to implement a 3-day free trial for the yearly product (SAR 129.99/year) in the "Start your 3-day FREE trial to continue." payment page, ensuring the subscription automatically charges SAR 129.99 after the trial unless canceled. The user has provided the Stripe price ID for the yearly product as an environment variable `YEARLY_PRICE_ID=price_123` in Replitâ€™s Secrets. We also need to ensure the "Start My 3-Day Free Trial" button triggers the Stripe payment popup or redirect/checkout flow, including Apple Pay support for iPhone users. The app name is "Saraat AI," and weâ€™re using our custom logo (already inserted in the project). Here are the steps to implement this:

1. **Verify Stripe Packages**
   - Ensure the Stripe packages are installed in Replit by running `npm install @stripe/stripe-js stripe` in the terminal if they arenâ€™t already installed.

2. **Frontend: Update Payment.jsx**
   - Modify `/frontend/src/components/Payment.jsx` to use Stripeâ€™s `redirectToCheckout` for setting up a subscription with a 3-day free trial, supporting Apple Pay for iPhone users:
     ```javascript
     import React, { useState } from 'react';
     import { loadStripe } from '@stripe/stripe-js';
     import { Elements } from '@stripe/react-stripe-js';

     const stripePromise = loadStripe(process.env.STRIPE_PUBLISHABLE_KEY);

     function PaymentContent() {
       const [selectedPlan, setSelectedPlan] = useState('yearly');

       const handleTrial = async () => {
         const stripe = await stripePromise;
         try {
           const { error } = await stripe.redirectToCheckout({
             lineItems: [{ price: process.env.YEARLY_PRICE_ID, quantity: 1 }], // Use the provided yearly price ID
             mode: 'subscription',
             successUrl: window.location.origin + '/create-account',
             cancelUrl: window.location.origin + '/payment',
             customerEmail: 'user@example.com', // Replace with user email or fetch dynamically
             subscriptionData: { trialPeriodDays: 3 }, // 3-day free trial
             paymentMethodTypes: ['card', 'apple_pay'], // Support Apple Pay for iPhone users
           });
           if (error) throw error;
         } catch (error) {
           console.error(error);
           alert('Error starting trial: ' + error.message);
         }
       };

       return (
         <div className="p-4">
           <h1 className="text-2xl font-bold mb-4">Start your 3-day FREE trial to continue.</h1>
           <div className="flex flex-col space-y-4 mb-4">
             <div className="flex items-center space-x-4">
               <span className="bg-orange-200 rounded-full p-2">ðŸ”“</span>
               <p className="text-gray-500">Today: Unlock all the appâ€™s features like AI calorie scanning and more.</p>
             </div>
             <div className="flex items-center space-x-4">
               <span className="bg-orange-200 rounded-full p-2">ðŸ””</span>
               <p className="text-gray-500">In 2 Days â€“ Reminder: Weâ€™ll send you a reminder that your trial is ending soon.</p>
             </div>
             <div className="flex items-center space-x-4">
               <span className="bg-black rounded-full p-2 text-white">ðŸ‘‘</span>
               <p className="text-gray-500">In 3 Days â€“ Billing Starts: Youâ€™ll be charged on 8 Mar 2025 unless you cancel anytime before.</p>
             </div>
           </div>
           <div className="flex space-x-4 mb-4">
             <label className="bg-white rounded-lg shadow-md p-4 cursor-pointer opacity-50">
               <input type="radio" name="plan" value="monthly" checked={selectedPlan === 'monthly'} onChange={() => setSelectedPlan('monthly')} className="mr-2" disabled />
               Monthly: SAR 39.99/mo
             </label>
             <label className="bg-white rounded-lg shadow-md p-4 cursor-pointer">
               <input type="radio" name="plan" value="yearly" checked={selectedPlan === 'yearly'} onChange={() => setSelectedPlan('yearly')} className="mr-2" />
               Yearly: SAR 10.83/mo <span className="bg-black text-white rounded px-2">3 DAYS FREE</span>
             </label>
           </div>
           <label className="flex items-center space-x-2 mb-4 text-gray-500">
             <input type="checkbox" defaultChecked className="mr-2" />
             No Payment Due Now
           </label>
           <button onClick={handleTrial} className="bg-black text-white rounded-lg px-4 py-2 w-full mb-2" disabled={!stripePromise}>
             Start My 3-Day Free Trial
           </button>
           <p className="text-gray-500 text-sm">3 days free, then SAR 129.99 per year (SAR 10.83/mo)</p>
         </div>
       );
     }

     export default function Payment() {
       return (
         <Elements stripe={stripePromise}>
           <PaymentContent />
         </Elements>
       );
     }
Ensure the button is disabled until Stripe is loaded and the "No Payment Due Now" checkbox is checked, using state to manage this logic.
Verify the UI matches the screenshotâ€™s design (black, white, gray, orange), remains responsive, and uses the "Saraat AI" logo.
Backend: Update payment.js
Modify /backend/routes/payment.js to create a subscription with a 3-day free trial using the YEARLY_PRICE_ID:
javascript

Collapse

Wrap

Copy
const express = require('express');
const router = express.Router();
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

router.post('/trial', async (req, res) => {
  try {
    const { email } = req.body;
    const customer = await stripe.customers.create({ email });

    const subscription = await stripe.subscriptions.create({
      customer: customer.id,
      items: [{ price: process.env.YEARLY_PRICE_ID }], // Use the provided yearly price ID
      trial_period_days: 3, // 3-day free trial
      trial_end: Math.floor(new Date('2025-03-08').getTime() / 1000), // March 8, 2025, or 3 days from now
    });

    // Store subscription ID in the `users` table
    const db = require('../db'); // Adjust path as needed
    await db.run('UPDATE users SET subscriptionId = ? WHERE email = ?', [subscription.id, email]);

    res.json({ success: true, subscriptionId: subscription.id });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

module.exports = router;
Ensure /backend/server.js or /backend/index.js mounts this router:
javascript

Collapse

Wrap

Copy
const paymentRouter = require('./routes/payment');
app.use('/api/payment', paymentRouter);
Update /backend/db.js to include a subscriptionId column in the users table if it doesnâ€™t exist:
javascript

Collapse

Wrap

Copy
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('./database.db');

db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      email TEXT UNIQUE,
      subscriptionId TEXT
    )
  `);
});

module.exports = db;
Set Up Stripe Webhooks (Optional but Recommended)
In your Stripe Dashboard, go to Developers > Webhooks and add a webhook endpoint (e.g., https://your-replit-url/api/payment/webhook).
In /backend/routes/payment.js, add a webhook endpoint to handle trial expiration and billing events:
javascript

Collapse

Wrap

Copy
router.post('/webhook', express.raw({ type: 'application/json' }), (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;

  try {
    event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET); // Set STRIPE_WEBHOOK_SECRET in Replit Secrets
  } catch (err) {
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === 'customer.subscription.trial_will_end') {
    const subscription = event.data.object;
    console.log('Trial will end soon for subscription:', subscription.id);
    // Optionally, notify the user (e.g., send an email) or update the database
  } else if (event.type === 'invoice.payment_succeeded') {
    const subscription = event.data.object.subscription;
    console.log('Subscription billed successfully:', subscription);
    // Update user status in database (e.g., active subscription)
  }

  res.json({ received: true });
});
Test webhooks in test mode using Stripeâ€™s CLI (stripe listen --forward-to your-replit-url/api/payment/webhook) or manually in the Dashboard.
Test the 3-Day Free Trial
Use Stripe test mode with STRIPE_PUBLISHABLE_KEY and STRIPE_SECRET_KEY in Replit Secrets.
Click "Start My 3-Day Free Trial" in Payment.jsx to test the Stripe redirect/checkout, ensuring it shows Apple Pay for iPhone users in Safari (iOS 10+).
Use a test card (e.g., 4242 4242 4242 4242, any expiry date, CVC 123) to simulate the subscription setup without real charges.
Verify in the Stripe Dashboard that the subscription is created with a 3-day trial ending on March 8, 2025 (or 3 days from March 5, 2025), and test that it automatically charges SAR 129.99 after the trial (use Stripeâ€™s test clock to simulate time passing).
Ensure Apple Pay Support for iPhone Users
Ensure paymentMethodTypes: ['card', 'apple_pay'] in redirectToCheckout triggers the Apple Pay sheet in Safari on iPhones, providing a one-touch subscription experience.
Test with a test card in Apple Pay (e.g., 4242 4242 4242 4242) to simulate the flow without real charges.
Integration and Validation
Ensure Payment.jsx integrates with the onboarding flow (back arrow, progress bar) and React Router in /frontend/src/App.jsx.
Test for responsiveness, design consistency (black, white, gray, orange), and use of the "Saraat AI" logo.
Provide comments in the code for clarity and scalability, ensuring secure handling of Stripe keys and subscription logic.
Once these steps are completed and tested, the payment page will offer a 3-day free trial for the yearly product (SAR 129.99/year), automatically charging SAR 129.99 after the trial unless canceled, with Apple Pay support for iPhone users.